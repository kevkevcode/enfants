import Foundation
import Network

// Structures pour d√©coder la r√©ponse de l'API ChatGPT
struct ChatGPTResponse: Codable {
    let id: String
    let object: String
    let created: Int
    let model: String
    let choices: [Choice]
    let usage: Usage
}

struct Choice: Codable {
    let index: Int
    let message: Message
    let finishReason: String?
    
    enum CodingKeys: String, CodingKey {
        case index
        case message
        case finishReason = "finish_reason"
    }
}

struct Message: Codable {
    let role: String
    let content: String
}

struct Usage: Codable {
    let promptTokens: Int
    let completionTokens: Int
    let totalTokens: Int
    
    enum CodingKeys: String, CodingKey {
        case promptTokens = "prompt_tokens"
        case completionTokens = "completion_tokens"
        case totalTokens = "total_tokens"
    }
}

// Service pour g√©rer les appels API √† ChatGPT
class ChatGPTService: NSObject, URLSessionTaskDelegate {
    static let shared = ChatGPTService()
    
    // URL de l'API OpenAI
    private static let apiURL = URL(string: Config.openAIAPIURL)!
    
    // Configuration de la requ√™te
    private static let maxRetries = 3
    private static let retryDelay: TimeInterval = 2.0
    private static var monitor: NWPathMonitor?
    private static var isNetworkAvailable = false
    private static var isAPIAvailable = false
    private static var pendingRequests: [(String, Int, String, String, StoryLength, (Result<(String, String), Error>) -> Void)] = []
    private var currentRetryCount = 0
    
    override private init() {
        super.init()
        Self.setupNetworkMonitoring()
    }
    
    private func testAPI(completion: @escaping (Bool) -> Void) {
        Self.testAPIConnection { success, _ in
            Self.isAPIAvailable = success
            completion(success)
        }
    }
    
    // Fonction pour g√©n√©rer une comptine
    func genererComptine(
        prenom: String,
        age: Int,
        passions: String,
        morale: String,
        longueur: StoryLength,
        completion: @escaping (Result<(String, String), Error>) -> Void
    ) {
        if !Self.isNetworkAvailable {
            print("üì° [DEBUG] R√©seau indisponible, mise en file d'attente...")
            Self.pendingRequests.append((prenom, age, passions, morale, longueur, completion))
            return
        }
        
        if !Self.isAPIAvailable {
            print("üîÑ [DEBUG] API indisponible, test en cours...")
            testAPI { [weak self] success in
                if success {
                    self?.genererComptine(prenom: prenom, age: age, passions: passions, morale: morale, longueur: longueur, completion: completion)
                } else {
                    Self.pendingRequests.append((prenom, age, passions, morale, longueur, completion))
                }
            }
            return
        }
        
        sendRequest(prenom: prenom, age: age, passions: passions, morale: morale, longueur: longueur, completion: completion)
    }
    
    private func sendRequest(prenom: String, age: Int, passions: String, morale: String, longueur: StoryLength, completion: @escaping (Result<(String, String), Error>) -> Void) {
        print("üì° [DEBUG] Pr√©paration de la requ√™te API...")
        print("üìù [DEBUG] Param√®tres re√ßus:")
        print("   - Pr√©nom: \(prenom)")
        print("   - √Çge: \(age)")
        print("   - Passions: \(passions)")
        print("   - Morale: \(morale)")
        print("   - Longueur: \(longueur)")
        
        guard let url = URL(string: "https://api.openai.com/v1/chat/completions") else {
            print("‚ùå [DEBUG] URL invalide")
            completion(.failure(NSError(domain: "ChatGPTService", code: -1, userInfo: [NSLocalizedDescriptionKey: "URL invalide"])))
            return
        }
        
        print("üîë [DEBUG] V√©rification de la cl√© API...")
        guard !Config.openAIAPIKey.isEmpty else {
            print("‚ùå [DEBUG] Cl√© API manquante")
            completion(.failure(NSError(domain: "ChatGPTService", code: -1, userInfo: [NSLocalizedDescriptionKey: "Cl√© API manquante"])))
            return
        }
        
        print("üìù [DEBUG] Construction du prompt...")
        let language = LocalizationManager.shared.currentLanguage
        print("üåê [DEBUG] Langue s√©lectionn√©e: \(language)")
        let languagePrompt: String
        switch language {
        case "fr":
            languagePrompt = "Tu es un conteur pour enfants expert en histoires courtes et amusantes en fran√ßais. Adapte ton langage et la complexit√© de l'histoire pour un enfant de \(age) ans."
        case "en":
            languagePrompt = "You are a storyteller expert in short and fun children's stories in English. Adapt your language and story complexity for a \(age)-year-old child."
        case "es":
            languagePrompt = "Eres un cuentacuentos experto en historias cortas y divertidas para ni√±os en espa√±ol. Adapta tu lenguaje y la complejidad de la historia para un ni√±o de \(age) a√±os."
        case "ru":
            languagePrompt = "–í—ã —Ä–∞—Å—Å–∫–∞–∑—á–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏ –≤–µ—Å–µ–ª—ã—Ö –¥–µ—Ç—Å–∫–∏—Ö –∏—Å—Ç–æ—Ä–∏—è—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —è–∑—ã–∫ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ \(age) –ª–µ—Ç."
        default:
            languagePrompt = "Tu es un conteur pour enfants expert en histoires courtes et amusantes en fran√ßais. Adapte ton langage et la complexit√© de l'histoire pour un enfant de \(age) ans."
        }
        
        let prompt = """
        \(languagePrompt)
        
        \(language == "fr" ? """
        G√©n√®re une histoire \(longueur == .short ? "courte" : longueur == .medium ? "de longueur moyenne" : "longue") (environ \(longueur.wordCount) mots) et adapt√©e pour un enfant de \(age) ans avec les √©l√©ments suivants :
        - Pr√©nom de l'enfant : \(prenom)
        - Centres d'int√©r√™t : \(passions)
        - Morale de l'histoire : \(morale)
        
        Structure de l'histoire :
        1. Introduction : pr√©sente le personnage principal et son univers
        2. Milieu : introduit une complication ou un d√©fi
        3. Fin : r√©sout le probl√®me de mani√®re positive
        
        R√©ponds avec un titre court et accrocheur sur la premi√®re ligne, suivi d'un retour √† la ligne, puis l'histoire.
        L'histoire doit √™tre positive et encourageante.
        Utilise un vocabulaire et des concepts adapt√©s √† l'√¢ge de l'enfant.
        
        IMPORTANT : La morale doit √™tre implicite dans l'histoire, transmise √† travers les actions et les choix des personnages.
        Ne mentionne jamais explicitement la morale √† la fin de l'histoire.
        Ne termine pas l'histoire en expliquant ce que l'enfant a appris.
        Laisse le lecteur tirer ses propres conclusions.
        """ : language == "en" ? """
        Generate a \(longueur == .short ? "short" : longueur == .medium ? "medium-length" : "long") story (about \(longueur.wordCount) words) adapted for a \(age)-year-old child with the following elements:
        - Child's name: \(prenom)
        - Interests: \(passions)
        - Story's moral: \(morale)
        
        Story structure:
        1. Introduction: introduce the main character and their world
        2. Middle: introduce a complication or challenge
        3. End: resolve the problem in a positive way
        
        Respond with a short catchy title on the first line, followed by a line break, then the story.
        The story should be positive and encouraging.
        Use vocabulary and concepts appropriate for the child's age.
        
        IMPORTANT: The moral should be implicit in the story, conveyed through the characters' actions and choices.
        Never explicitly state the moral at the end of the story.
        Do not end the story by explaining what the child learned.
        Let the reader draw their own conclusions.
        """ : language == "es" ? """
        Genera una historia \(longueur == .short ? "corta" : longueur == .medium ? "de longitud media" : "larga") (aproximadamente \(longueur.wordCount) palabras) adaptada para un ni√±o de \(age) a√±os con los siguientes elementos:
        - Nombre del ni√±o: \(prenom)
        - Intereses: \(passions)
        - Moraleja de la historia: \(morale)
        
        Estructura de la historia:
        1. Introducci√≥n: presenta al personaje principal y su mundo
        2. Medio: introduce una complicaci√≥n o desaf√≠o
        3. Final: resuelve el problema de manera positiva
        
        Responde con un t√≠tulo corto y atractivo en la primera l√≠nea, seguido de un salto de l√≠nea, luego la historia.
        La historia debe ser positiva y alentadora.
        Utiliza vocabulario y conceptos apropiados para la edad del ni√±o.
        
        IMPORTANTE: La moraleja debe ser impl√≠cita en la historia, transmitida a trav√©s de las acciones y elecciones de los personajes.
        Nunca menciones expl√≠citamente la moraleja al final de la historia.
        No termines la historia explicando lo que el ni√±o aprendi√≥.
        Deja que el lector saque sus propias conclusiones.
        """ : """
        –°–æ–∑–¥–∞–π—Ç–µ \(longueur == .short ? "–∫–æ—Ä–æ—Ç–∫—É—é" : longueur == .medium ? "—Å—Ä–µ–¥–Ω—é—é" : "–¥–ª–∏–Ω–Ω—É—é") –∏—Å—Ç–æ—Ä–∏—é (–ø—Ä–∏–º–µ—Ä–Ω–æ \(longueur.wordCount) —Å–ª–æ–≤), –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ \(age) –ª–µ—Ç, —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:
        - –ò–º—è —Ä–µ–±–µ–Ω–∫–∞: \(prenom)
        - –ò–Ω—Ç–µ—Ä–µ—Å—ã: \(passions)
        - –ú–æ—Ä–∞–ª—å –∏—Å—Ç–æ—Ä–∏–∏: \(morale)
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:
        1. –í–≤–µ–¥–µ–Ω–∏–µ: –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∏ –µ–≥–æ –º–∏—Ä
        2. –°–µ—Ä–µ–¥–∏–Ω–∞: –≤–≤–µ–¥–∏—Ç–µ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–∑–æ–≤
        3. –ö–æ–Ω–µ—Ü: —Ä–µ—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
        
        –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∑–∞—Ç–µ–º —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é.
        –ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π.
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –∏ –ø–æ–Ω—è—Ç–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–æ–∑—Ä–∞—Å—Ç—É —Ä–µ–±–µ–Ω–∫–∞.
        
        –í–ê–ñ–ù–û: –ú–æ—Ä–∞–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ—è–≤–Ω–æ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º–æ–π —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
        –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π—Ç–µ –º–æ—Ä–∞–ª—å —è–≤–Ω–æ –≤ –∫–æ–Ω—Ü–µ –∏—Å—Ç–æ—Ä–∏–∏.
        –ù–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ç–æ–≥–æ, —á–µ–º—É –Ω–∞—É—á–∏–ª—Å—è —Ä–µ–±–µ–Ω–æ–∫.
        –ü–æ–∑–≤–æ–ª—å—Ç–µ —á–∏—Ç–∞—Ç–µ–ª—é —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã.
        """)
        """
        
        print("üõ† [DEBUG] Configuration de la requ√™te...")
        
        // Configuration de la session URL
        let sessionConfig = URLSessionConfiguration.default
        sessionConfig.timeoutIntervalForRequest = 30.0
        sessionConfig.timeoutIntervalForResource = 60.0
        sessionConfig.waitsForConnectivity = true
        sessionConfig.allowsCellularAccess = true
        sessionConfig.allowsConstrainedNetworkAccess = true
        sessionConfig.allowsExpensiveNetworkAccess = true
        
        let session = URLSession(configuration: sessionConfig)
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(Config.openAIAPIKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("gzip, deflate", forHTTPHeaderField: "Accept-Encoding")
        request.setValue("enfants-app/1.0", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = 30.0
        
        let messages: [[String: Any]] = [
            ["role": "system", "content": languagePrompt],
            ["role": "user", "content": prompt]
        ]
        
        let parameters: [String: Any] = [
            "model": "gpt-4",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 800,
            "top_p": 1,
            "frequency_penalty": 0,
            "presence_penalty": 0
        ]
        
        do {
            print("üì¶ [DEBUG] Encodage des param√®tres...")
            request.httpBody = try JSONSerialization.data(withJSONObject: parameters)
        } catch {
            print("‚ùå [DEBUG] Erreur d'encodage JSON: \(error.localizedDescription)")
            completion(.failure(error))
            return
        }
        
        print("üöÄ [DEBUG] Envoi de la requ√™te √† OpenAI...")
        let task = session.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå [DEBUG] Erreur r√©seau: \(error.localizedDescription)")
                print("‚ùå [DEBUG] D√©tails de l'erreur: \(error)")
                completion(.failure(error))
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå [DEBUG] R√©ponse invalide")
                completion(.failure(NSError(domain: "ChatGPTService", code: -1, userInfo: [NSLocalizedDescriptionKey: "R√©ponse invalide"])))
                return
            }
            
            print("üì° [DEBUG] Code de r√©ponse HTTP: \(httpResponse.statusCode)")
            print("üì° [DEBUG] Headers de r√©ponse: \(httpResponse.allHeaderFields)")
            
            guard let data = data else {
                print("‚ùå [DEBUG] Pas de donn√©es re√ßues")
                completion(.failure(NSError(domain: "ChatGPTService", code: -1, userInfo: [NSLocalizedDescriptionKey: "Pas de donn√©es re√ßues"])))
                return
            }
            
            do {
                print("üì¶ [DEBUG] D√©codage de la r√©ponse...")
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üìÑ [DEBUG] R√©ponse brute: \(responseString)")
                }
                
                let decoder = JSONDecoder()
                let response = try decoder.decode(ChatGPTResponse.self, from: data)
                
                if let content = response.choices.first?.message.content {
                    let components = content.components(separatedBy: "\n\n")
                    let titre = components[0].trimmingCharacters(in: .whitespacesAndNewlines)
                    let histoire = components.dropFirst().joined(separator: "\n\n").trimmingCharacters(in: .whitespacesAndNewlines)
                    print("‚úÖ [DEBUG] Histoire g√©n√©r√©e avec succ√®s")
                    completion(.success((titre, histoire)))
                } else {
                    print("‚ùå [DEBUG] Contenu manquant dans la r√©ponse")
                    completion(.failure(NSError(domain: "ChatGPTService", code: -1, userInfo: [NSLocalizedDescriptionKey: "Contenu manquant dans la r√©ponse"])))
                }
            } catch {
                print("‚ùå [DEBUG] Erreur de d√©codage: \(error.localizedDescription)")
                completion(.failure(error))
            }
        }
        
        task.resume()
        print("üì° [DEBUG] Requ√™te lanc√©e, en attente de r√©ponse...")
    }
    
    static func setup() {
        print("‚úÖ ChatGPTService initialis√©")
        print("üì° Surveillance r√©seau activ√©e")
        
        // V√©rification imm√©diate du r√©seau
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            checkNetworkStatus()
            
            // V√©rification de la configuration
            print("üîë V√©rification de la configuration API")
            print("üìù URL de l'API configur√©e: \(Config.openAIAPIURL)")
            print("üîí Cl√© API configur√©e: \(Config.isAPIKeyConfigured ? "Oui" : "Non")")
            if !Config.isAPIKeyConfigured {
                print("‚ö†Ô∏è La cl√© API n'est pas configur√©e correctement")
            }
        }
    }
    
    static func setupNetworkMonitoring() {
        print("üåê [DEBUG] Configuration du monitoring r√©seau...")
        monitor = NWPathMonitor()
        
        monitor?.pathUpdateHandler = { path in
            isNetworkAvailable = path.status == .satisfied
            print("üåê [DEBUG] √âtat du r√©seau : \(isNetworkAvailable ? "Connect√©" : "D√©connect√©")")
            
            // Log des interfaces disponibles
            print("üì° [DEBUG] Interfaces r√©seau disponibles :")
            path.availableInterfaces.forEach { interface in
                print("   - Type: \(interface.type)")
            }
            
            // V√©rification du type de connexion
            if path.usesInterfaceType(.cellular) {
                print("üì± [DEBUG] Connexion cellulaire d√©tect√©e")
            }
            if path.usesInterfaceType(.wifi) {
                print("üì∂ [DEBUG] Connexion WiFi d√©tect√©e")
            }
            
            // Log des conditions r√©seau
            print("üìä [DEBUG] Conditions r√©seau :")
            print("   - Connexion co√ªteuse : \(path.isExpensive)")
            print("   - Connexion contrainte : \(path.isConstrained)")
            
            if path.status != .satisfied {
                print("‚ùå [DEBUG] Conditions r√©seau non satisfaites")
                if path.unsatisfiedReason == .notAvailable {
                    print("   - Raison : R√©seau non disponible")
                } else if path.unsatisfiedReason == .cellularDenied {
                    print("   - Raison : Acc√®s cellulaire refus√©")
                } else if path.unsatisfiedReason == .wifiDenied {
                    print("   - Raison : Acc√®s WiFi refus√©")
                } else if path.unsatisfiedReason == .localNetworkDenied {
                    print("   - Raison : Acc√®s r√©seau local refus√©")
                }
            }
            
            if isNetworkAvailable {
                handleNetworkChange()
            }
        }
        
        monitor?.start(queue: DispatchQueue.global())
        print("‚úÖ [DEBUG] Monitoring r√©seau d√©marr√©")
        
        // Test imm√©diat de la connexion
        testAPIConnection { success, error in
            if success {
                print("‚úÖ [DEBUG] Test de connexion initial r√©ussi")
            } else {
                print("‚ùå [DEBUG] Test de connexion initial √©chou√© : \(error ?? "Erreur inconnue")")
            }
        }
    }
    
    private static func handleNetworkChange() {
        if isNetworkAvailable {
            print("üåê [DEBUG] R√©seau disponible, traitement des requ√™tes en attente...")
            while let request = pendingRequests.first {
                pendingRequests.removeFirst()
                print("üîÑ [DEBUG] Traitement de la requ√™te en attente pour \(request.0)")
                shared.genererComptine(
                    prenom: request.0,
                    age: request.1,
                    passions: request.2,
                    morale: request.3,
                    longueur: request.4,
                    completion: request.5
                )
            }
        }
    }
    
    private static func testAPIConnection() {
        guard let url = URL(string: "\(Config.openAIAPIURL)/models") else {
            print("‚ùå URL de test invalide")
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(Config.openAIAPIKey)", forHTTPHeaderField: "Authorization")
        
        print("üîÑ Test de connexion √† l'API OpenAI...")
        
        let task = Config.session.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå Erreur de test API: \(error.localizedDescription)")
                return
            }
            
            if let httpResponse = response as? HTTPURLResponse {
                print("üì° Code de r√©ponse test API: \(httpResponse.statusCode)")
                print("‚úÖ API OpenAI accessible")
            }
        }
        task.resume()
    }
    
    // Fonction pour v√©rifier manuellement l'√©tat du r√©seau
    static func checkNetworkStatus() {
        print("üì° V√©rification manuelle du r√©seau")
        print("üì± √âtat actuel: \(isNetworkAvailable ? "Connect√©" : "D√©connect√©")")
        if !isNetworkAvailable {
            print("‚ö†Ô∏è Le r√©seau n'est pas disponible")
            if let currentPath = monitor?.currentPath {
                print("üì± Interfaces disponibles: \(currentPath.availableInterfaces.map { String(describing: $0.type) }.joined(separator: ", "))")
            }
        }
    }
    
    static func testAPIConnection(completion: @escaping (Bool, String?) -> Void) {
        print("üîÑ [DEBUG] Test de connexion √† l'API OpenAI...")
        
        guard let url = URL(string: "https://api.openai.com/v1/models") else {
            print("‚ùå [DEBUG] URL invalide")
            completion(false, "URL invalide")
            return
        }
        
        print("üîë [DEBUG] V√©rification de la cl√© API...")
        guard !Config.openAIAPIKey.isEmpty else {
            print("‚ùå [DEBUG] Cl√© API manquante")
            completion(false, "Cl√© API manquante")
            return
        }
        
        print("üõ† [DEBUG] Configuration de la requ√™te...")
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(Config.openAIAPIKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("gzip, deflate", forHTTPHeaderField: "Accept-Encoding")
        request.setValue("enfants-app/1.0", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = 10
        
        print("üì° [DEBUG] Envoi de la requ√™te de test...")
        
        let task = URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("‚ùå [DEBUG] Erreur de connexion: \(error.localizedDescription)")
                completion(false, "Erreur de connexion: \(error.localizedDescription)")
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå [DEBUG] R√©ponse invalide")
                completion(false, "R√©ponse invalide")
                return
            }
            
            print("üì° [DEBUG] Code de r√©ponse: \(httpResponse.statusCode)")
            
            switch httpResponse.statusCode {
            case 200:
                print("‚úÖ [DEBUG] Connexion √† l'API r√©ussie")
                completion(true, nil)
            case 401:
                print("‚ùå [DEBUG] Erreur d'authentification - Cl√© API invalide")
                completion(false, "Cl√© API invalide")
            case 403:
                print("‚ùå [DEBUG] Acc√®s refus√©")
                completion(false, "Acc√®s refus√©")
            case 429:
                print("‚ö†Ô∏è [DEBUG] Limite de requ√™tes atteinte")
                completion(false, "Limite de requ√™tes atteinte")
            default:
                if let data = data, let str = String(data: data, encoding: .utf8) {
                    print("‚ùå [DEBUG] Erreur inattendue: \(str)")
                    completion(false, "Erreur inattendue: \(str)")
                } else {
                    print("‚ùå [DEBUG] Erreur inattendue: \(httpResponse.statusCode)")
                    completion(false, "Erreur inattendue: \(httpResponse.statusCode)")
                }
            }
        }
        task.resume()
        print("üì° [DEBUG] Requ√™te lanc√©e, en attente de r√©ponse...")
    }
} 