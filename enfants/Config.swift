import Foundation

// Configuration de l'application
struct Config {
    // Configuration de l'API OpenAI
    static let openAIAPIURL = "https://api.openai.com/v1/chat/completions"
    static let openAIModel = "gpt-4"
    static let temperature = 0.7
    static let maxTokens = 1000
    
    // Cl√©s API - √Ä configurer via les variables d'environnement
    static let openAIAPIKey: String = {
        if let apiKey = ProcessInfo.processInfo.environment["OPENAI_API_KEY"] {
            return apiKey
        }
        return "" // La cl√© sera fournie via les variables d'environnement
    }()
    
    static let elevenLabsAPIKey: String = {
        if let apiKey = ProcessInfo.processInfo.environment["ELEVENLABS_API_KEY"] {
            return apiKey
        }
        return "" // La cl√© sera fournie via les variables d'environnement
    }()
    
    // Configuration ElevenLabs
    static let elevenLabsAPIURL = "https://api.elevenlabs.io/v1/text-to-speech"
    static let elevenLabsVoiceID = "" // √Ä configurer selon la voix souhait√©e
    
    // Session URLSession d√©di√©e
    static let session: URLSession = {
        let config = URLSessionConfiguration.default
        config.timeoutIntervalForRequest = 30
        config.timeoutIntervalForResource = 300
        config.waitsForConnectivity = true
        config.requestCachePolicy = .reloadIgnoringLocalCacheData
        
        // Ajout des headers par d√©faut
        config.httpAdditionalHeaders = [
            "User-Agent": "enfants-app/1.0",
            "Accept-Language": "fr-FR",
            "Accept-Encoding": "gzip, deflate"
        ]
        
        return URLSession(configuration: config)
    }()
    
    // V√©rification de la configuration
    static var isAPIKeyConfigured: Bool {
        let key = openAIAPIKey
        let isValid = !key.isEmpty && key.hasPrefix("sk-")
        print("üîë V√©rification de la cl√© API: \(isValid ? "Valide" : "Non valide")")
        return isValid
    }
    
    static func initialize() {
        print("‚öôÔ∏è Configuration initialis√©e")
        print("üåê URL API: \(openAIAPIURL)")
        print("üìù Mod√®le: \(openAIModel)")
        print("üîë √âtat de la cl√© API: \(isAPIKeyConfigured ? "Configur√©e" : "Non configur√©e")")
        
        // Test de connexion √† l'API
        testAPIConnection()
    }
    
    static func testAPIConnection() {
        guard isAPIKeyConfigured else {
            print("‚ùå La cl√© API n'est pas configur√©e")
            return
        }
        
        guard let url = URL(string: "https://api.openai.com/v1/models") else {
            print("‚ùå URL invalide")
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("Bearer \(openAIAPIKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        request.setValue("gzip, deflate", forHTTPHeaderField: "Accept-Encoding")
        request.setValue("enfants-app/1.0", forHTTPHeaderField: "User-Agent")
        
        print("üîÑ Test de connexion √† l'API en cours...")
        
        let task = session.dataTask(with: request) { data, response, error in
            if let error = error as NSError? {
                print("‚ùå Erreur de connexion (\(error.code)): \(error.localizedDescription)")
                print("üìù Domaine de l'erreur: \(error.domain)")
                
                if error.code == -1009 {
                    print("üì± Pas de connexion Internet - V√©rifiez votre connexion")
                } else if error.code == -1001 {
                    print("‚è± D√©lai d'attente d√©pass√© - Essayez √† nouveau")
                } else if error.code == -1200 {
                    print("üîí Erreur SSL/TLS - V√©rifiez votre connexion")
                }
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå R√©ponse invalide du serveur")
                return
            }
            
            print("üì° Code de r√©ponse: \(httpResponse.statusCode)")
            
            switch httpResponse.statusCode {
            case 200:
                print("‚úÖ Connexion √† l'API r√©ussie")
                if let data = data, let json = try? JSONSerialization.jsonObject(with: data, options: []) {
                    print("üìä R√©ponse re√ßue: \(json)")
                }
            case 401:
                print("‚ùå Erreur d'authentification - Cl√© API invalide")
                print("üîç V√©rifiez votre cl√© sur: https://platform.openai.com/api-keys")
            case 403:
                print("‚ùå Acc√®s refus√© - V√©rifiez les permissions de votre cl√© API")
                print("üîç V√©rifiez votre compte sur: https://platform.openai.com/account")
            case 429:
                print("‚ö†Ô∏è Limite de requ√™tes atteinte")
                print("üîç V√©rifiez votre utilisation sur: https://platform.openai.com/usage")
            default:
                print("‚ùå Erreur inattendue: \(httpResponse.statusCode)")
                if let data = data, let str = String(data: data, encoding: .utf8) {
                    print("üìù R√©ponse du serveur: \(str)")
                }
            }
        }
        task.resume()
    }
} 
